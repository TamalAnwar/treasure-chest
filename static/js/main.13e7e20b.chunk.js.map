{"version":3,"sources":["components/Chest/Chest.jsx","components/helpers.js","components/Coin/Coin.jsx","components/App/App.jsx","components/redux/reducers/info.js","components/redux/store.js","index.js"],"names":["connect","state","info","_ref","desc","name","dispatch","_useState","useState","_useState2","Object","slicedToArray","chest","openChest","concat","react_default","a","createElement","className","disabled","foundChest","onClick","type","chests","array","output","length","random","Math","floor","push","splice","shuffleArray","randomCoin","Coin","coin","drawCoin","map","index","key","Coin_Coin","Chest_Chest","style","textAlign","padding","window","location","reload","arguments","undefined","action","newState","console","log","rootReducer","combineReducers","store","createStore","render","es","App_App","document","getElementById"],"mappings":"+NAsDeA,kBAJf,SAAyBC,GACvB,MAAO,CAAEC,KAAMD,EAAMC,OAGRF,CAlCf,SAAAG,GAAyC,IAKnCC,EALWF,EAAwBC,EAAxBD,KAAMG,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,SAAYC,EAGZC,oBAAS,GAHGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGhCK,EAHgCH,EAAA,GAGzBI,EAHyBJ,EAAA,GAavC,OALEL,EADW,SAATC,EACE,OAAAS,OAAUT,EAAV,UAEA,4BAIJU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,SAAAJ,OAAWF,EAAQP,EAAO,MAExCU,EAAAC,EAAAC,cAAA,UACEC,UAAU,MACVC,WAAUjB,EAAKkB,WACfC,QAAS,WACPf,EAAS,CAAEgB,KAAM,aAAcjB,OAAMD,SACrCS,GAAU,KALd,iBCJN,IAAIU,EAdJ,SAAsBC,GAGpB,IAFA,IAAIC,EAAS,GAEND,EAAME,QAAQ,CAGnB,IAAIC,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,EAAME,QAC9CD,EAAOK,KAAKN,EAAMG,IAElBH,EAAMO,OAAOJ,EAAQ,GAEvB,OAAOF,EAGIO,CAAa,CAAC,OAAQ,SAAU,SACzCC,EA5Ba,IADFL,KAAKC,MAAsB,EAAhBD,KAAKD,UAEpB,OAEA,SCuBIO,MArBf,SAAA/B,GAAwB,IAARE,EAAQF,EAARE,KACD,SAATA,IACFA,EAAO4B,GAFa,IAAA1B,EAMGC,oBAAS,GANZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAMf4B,EANe1B,EAAA,GAMT2B,EANS3B,EAAA,GAQtB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEZiB,EAAOpB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAJ,OAAUT,EAAV,UAAwBA,GAAc,KAC3D8B,EAAO,KACNpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMG,QAAS,kBAAMe,GAAS,KAAhD,uBC+COpC,kBAJf,SAAyBC,GACvB,MAAO,CAAEC,KAAMD,EAAMC,OAGRF,CApDf,SAAAG,GAAuB,IAARD,EAAQC,EAARD,KAQb,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,4CAEEH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,+DACAF,EAAAC,EAAAC,cAAA,iHAKFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACGf,EAAKkB,WACJL,EAAAC,EAAAC,cAAA,yBAAiBf,EAAKE,MAEtB,iBAINW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZK,EAAOc,IAAI,SAAChC,EAAMiC,GACjB,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKD,GACRvB,EAAAC,EAAAC,cAACuB,EAAD,CAAMnC,KAAMA,IACZU,EAAAC,EAAAC,cAACwB,EAAD,CAAOpC,KAAMA,QAKpBH,EAAKkB,WACJL,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAEC,UAAW,SAAUC,QAAS,SAC1C7B,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMwB,OAAOC,SAASC,WAAvC,WAEA,eC5CK7C,MAbf,WAAqD,IAAvCD,EAAuC+C,UAAAtB,OAAA,QAAAuB,IAAAD,UAAA,GAAAA,UAAA,GAA/B,CAAE5B,YAAY,GAAS8B,EAAQF,UAAAtB,OAAA,EAAAsB,UAAA,QAAAC,EAC7C3B,EAAqB4B,EAArB5B,KAAMjB,EAAe6C,EAAf7C,KAAMD,EAAS8C,EAAT9C,KAClB,GAAa,eAATkB,EAAuB,CACzB,IAAI6B,EAAW,CACfA,YAAsB,GAItB,OAHAA,EAAS9C,KAAOA,EAChB8C,EAAS/C,KAAOA,EAChBgD,QAAQC,IAAI,cAAeF,GACpBA,EAET,OAAOlD,GCZHqD,EAAcC,YAAgB,CAAErD,SAIvBsD,EAFDC,YAAYH,GCC1BI,iBACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUH,MAAOA,GACfzC,EAAAC,EAAAC,cAAC2C,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.13e7e20b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './chest.css';\r\nimport { connect } from 'react-redux';\r\n\r\n/**\r\n *\r\n * @param {*} props\r\n * Each chest will have these information and attribute about them\r\n * Chest name: gold/silver/50-50\r\n * Contents: 100 gold, 100 silver, 50/50 gold silver\r\n * Random coin:\r\n * For gold: the coin will be gold\r\n * For silver: the coin will be silver\r\n * For 50/50: it could be either gold or silver\r\n * States:\r\n * Chest: open/close\r\n * Coin: draw/not-drawn\r\n *\r\n */\r\n\r\nfunction Chest({ info, name, dispatch }) {\r\n  // Local state\r\n  // Chest is open or close? Default: false/close\r\n  const [chest, openChest] = useState(false);\r\n\r\n  let desc;\r\n  // Set the description and random coins:\r\n  if (name !== 'half') {\r\n    desc = `100 ${name} coins`;\r\n  } else {\r\n    desc = `50 gold & 50 silver coins`;\r\n  }\r\n\r\n  return (\r\n    <div className=\"box-shell\">\r\n      <div className={`chest ${chest ? name : ''}`} />\r\n\r\n      <button\r\n        className=\"btn\"\r\n        disabled={info.foundChest ? true : false}\r\n        onClick={() => {\r\n          dispatch({ type: 'PICK_CHEST', name, desc });\r\n          openChest(true);\r\n        }}>\r\n        Pick Chest\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { info: state.info };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Chest);\r\n","/**\r\n * pickRandom picks a random coin between gold and silver\r\n */\r\n\r\nfunction pickRandom() {\r\n  let random = Math.floor(Math.random() * 2);\r\n  if (random === 1) {\r\n    return 'gold';\r\n  } else {\r\n    return 'silver';\r\n  }\r\n}\r\n/**\r\n * @param {array} array which is an array of items to be shuffled\r\n * A function which returns an array of random chests like:\r\n * ['gold', 'half', 'silver']\r\n * or\r\n * ['silve', 'gold', 'fifty']\r\n */\r\nfunction shuffleArray(array) {\r\n  let output = [];\r\n  // While we still have items, keep rolling\r\n  while (array.length) {\r\n    // Pick one random item, fill the array, then remove that item\r\n    // Pick a number between 0-2\r\n    let random = Math.floor(Math.random() * array.length);\r\n    output.push(array[random]);\r\n    // Remove the item from the array array\r\n    array.splice(random, 1);\r\n  }\r\n  return output;\r\n}\r\n\r\nlet chests = shuffleArray(['gold', 'silver', 'half']);\r\nlet randomCoin = pickRandom();\r\n\r\nexport { chests, randomCoin, pickRandom, shuffleArray };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { randomCoin } from '../helpers';\r\n\r\n/**\r\n * This is a coin which I will draw from the chest\r\n * If the chest is gold, coin is gold\r\n * If silver, the coin is silver\r\n * If half, then draw a random coin between gold and silver\r\n * @param {name} string which takes the name of the chest\r\n */\r\n\r\nfunction Coin({ name }) {\r\n  if (name === 'half') {\r\n    name = randomCoin;\r\n  }\r\n\r\n  // Coin is drawn or not? Default: false/not-drawn\r\n  const [coin, drawCoin] = useState(false);\r\n\r\n  return (\r\n    <div className=\"coin-area\">\r\n      {/** The random coin */}\r\n      {coin ? <div className={`coin ${name}-coin`}>{name}</div> : null}\r\n      {coin ? null : (\r\n        <button className=\"btn\" onClick={() => drawCoin(true)}>\r\n          Draw a coin\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Coin;\r\n","import React, { useState, Fragment } from 'react';\r\nimport Chest from '../Chest/Chest';\r\nimport Coin from '../Coin/Coin';\r\nimport { chests } from '../helpers';\r\nimport { connect } from 'react-redux';\r\nimport './app.css';\r\n\r\n/**\r\n *\r\n * @param {*} props\r\n * Load the app,\r\n * Randomly pick the contents of the boxes\r\n * 1 box will have 100 gold\r\n * 1 box will have 100 silver\r\n * 1 box will have 50 gold/50 silver\r\n * Render 3 boxes and the buttons to pick\r\n *\r\n */\r\n\r\nfunction App({ info }) {\r\n  /**\r\n   * A function which returns an array of random chests like:\r\n   * ['gold', 'half', 'silver']\r\n   * or\r\n   * ['silve', 'gold', 'fifty']\r\n   */\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"info\">\r\n        You are presented with 3 treasure chests.\r\n        <p>One of them contains 100 gold coins,</p>\r\n        <p>one contains 100 silver coins,</p>\r\n        <p>the last one contains 50 silver and 50 gold coins.</p>\r\n        <p>\r\n          You can draw one coin from the chest before you decide. Can you pick\r\n          the chest with 100 gold coins?\r\n        </p>\r\n      </div>\r\n      <div className=\"header\">\r\n        <h2>\r\n          {info.foundChest ? (\r\n            <span>You found {info.desc}</span>\r\n          ) : (\r\n            'Pick a chest'\r\n          )}\r\n        </h2>\r\n      </div>\r\n      <div className=\"chest-area\">\r\n        {chests.map((name, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <Coin name={name} />\r\n              <Chest name={name} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {info.foundChest ? (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <button onClick={() => window.location.reload()}>Retry?</button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { info: state.info };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","/**\r\n * Game info reducer\r\n * Tells the user the result of the game and then locks the chests from opening.\r\n */\r\n\r\nfunction info(state = { foundChest: false }, action) {\r\n  let { type, name, desc } = action;\r\n  if (type === 'PICK_CHEST') {\r\n    let newState = {};\r\n    newState.foundChest = true;\r\n    newState.name = name;\r\n    newState.desc = desc;\r\n    console.log('Dispatched!', newState);\r\n    return newState;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default info;\r\n","import { createStore, combineReducers } from 'redux';\r\nimport info from './reducers/info';\r\n\r\nconst rootReducer = combineReducers({ info });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './components/App/App.jsx';\r\nimport { Provider } from 'react-redux';\r\nimport store from './components/redux/store';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}